//~ВЛАСТИВОСТІ

// Уяви автомат із продажу кави. Клієнт може обрати каву з цукром або без, з молоком,
// шоколадом або апельсиновим соком —
//! усе це властивості кави.

// Залежно від необхідної властивості, кава буде готуватися різними методами
// — певні рецепти вимагатимуть операції “додати цукор” або “додати молоко”, інші — ні.
//! Це різні методи.

// Так само у програмуванні.
// Дані мають набір властивостей і методів, до яких можна звертатися в коді.
// Цей набір називається інтерфейсом.Використання властивостей і методів дозволяє нам отримувати
// інформацію про сутності та виконувати операції з ними.
// У попередніх розділах ми вже познайомилися з властивостями.
// Щоб добре розрізняти властивості та методи, варто згадати,
// що властивості — це описові характеристики сутності.
// У прикладі з кавою — це колір, кількість цукру, температура.
// Наприклад, у програмуванні рядок має властивість (length),
// яка повертає кількість символів у рядку.
// Для доступу до властивості використовується синтаксис із крапкою:
// (objectName.property)
// Щоб отримати довжину рядка, використовується властивість length:

// const message = "JavaScript is awesome";
// console.log(message.length); // 21

//^====================================================================================================

// Функція normalizeInput(input, to) оголошує два параметри:
// input - рядок, який потрібно привести до певного регістру
// to - рядок с двома можливими значеннями: "upper" або "lower",
//     що вказують до якого регістру потрібно привести значення input
// Доповни код функції таким чином, щоб:
// Якщо значення параметра to — це рядок "upper", то функція
//  повертала копію рядка input, але у верхньому регістрі
// В іншому разі, функція повертала копію рядка inputу нижньому регістрі

// function normalizeInput(input, to) {
//     if (to === "upper") {
//         return input.toUpperCase();
//     } else {
//         return input.toLowerCase();
//     }

//^====================================================================================================
// Функція calculateTotal(number) приймає ціле число(параметр number)
// Використовуючи цикл for, доповни код функції так, щоб вона повертала
// суму всіх цілих чисел від одиниці до цього числа включно.
// Наприклад, якщо number дорівнює 3, то сума - це 1 + 2 + 3, тобто 6.

// function calculateTotal(number) {
//     // Ініціалізуємо змінну для збереження суми
//     let sum = 0;

//     // Використовуємо цикл for для ітерації від 1 до заданого числа (включно)

//     for (let i = 1; i <= number; i++) { // i++ - означає, що значення змінної i збільшується на одиницю.

//         // Додаємо поточне число до суми
//         sum += i;

//         // вираз sum += i використовується всередині циклу
//         //для додавання поточного числа(представленого змінною i) до змінної sum
//         //на кожній ітерації циклу.Таким чином, на кінці циклу sum буде містити суму
//         // всіх цілих чисел від 1 до заданого числа(включно).
//     }

//     // Повертаємо отриману суму
//     return sum;
// }

//^====================================================================================================

// Функція calculateEvenTotal(number) приймає ціле число(параметр number).Доповни код функції так,
//     щоб вона повертала суму всіх парних цілих чисел від одиниці до цього числа включно.
// Парні числа — це ті, що можна поділити на 2 без остачі(як це зробити розглядалося у темі Арифметичні операції у модулі 1).
//     Наприклад, якщо number дорівнює 6, то сума - це 2 + 4 + 6, тобто 12.

// function calculateEvenTotal(number) {
//     // Ініціалізуємо змінну для збереження суми парних чисел
//     let total = 0;
//     for (let i = 1; i <= number; i++) {
//         if (i % 2 === 0) {  // Перевірка на парність
//             total += i;
//         }
//     }
//     return total;
// }

//^====================================================================================================

// Доповни код таким чином, щоб у змінну number записувалося перше число у проміжку від start до end, яке ділиться на 5 без остачі.

// Оголошена змінна start
// Оголошена змінна end
// Оголошена змінна number
// Якщо start це 6, а end це 17, то підсумкове значення змінної number дорівнює 10
// Якщо start це 17, а end це 25, то підсумкове значення змінної number дорівнює 20
// Якщо start це 2, а end це 11, то підсумкове значення змінної number дорівнює 5
// В коді є цикл for, в якому використовується break для можливості виходу з циклу до завершення всіх ітерацій

// Оголошення змінних
//let start = 6; // Задання початкового значення
//let end = 17; // Задання кінцевого значення
//let number; // Змінна, в яку буде записано перше число, що ділиться на 5 без остачі

// Використання циклу для пошуку першого числа, яке ділиться на 5 без остачі
//for (let i = start; i <= end; i++) {
//if (i % 5 === 0) { // Перевірка, чи поточне число ділиться на 5 без остачі
// number = i; // Запис першого знайденого числа у змінну
//break; // Завершення циклу після знаходження числа
//}
//}

//^====================================================================================================

// Функція findNumber(start, end, divisor) приймає три параметра, які є цілими числами.

// Доповни код функції таким чином, щоб вона:

// повертала перше число у діапазоні від start до end включно, яке ділиться на divisor без остачі
// не використовуй оператор break
// Оголошена функція findNumber(start, end, divisor)
// Виклик findNumber(2, 6, 5) повертає 5
// Виклик findNumber(8, 17, 3) повертає 9
// Виклик findNumber(6, 9, 4) повертає 8
// Виклик findNumber(16, 35, 7) повертає 21
// Виклик findNumber() з випадковим набором чисел повертає правильний результат

// function findNumber(start, end, divisor) {
//     for (let i = start; i <= end; i++) {
//         if (i % divisor === 0) {
//             return i; // Повертаємо перше знайдене число, яке ділиться на divisor без остачі
//         }
//     }

//     // Якщо жодного такого числа не знайдено, повертаємо null або інше значення за вибором
//     return null;
// }

//^====================================================================================================